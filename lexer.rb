#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "tokens.rex".
#++

require 'racc/parser'
# Compile with: rex tokens.rex -o lexer.rb

class Lexer < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/[ \t]+/))
        ;

      when (text = @ss.scan(/\#.*$/))
        ;

      when (text = @ss.scan(/\d+/))
         action { [:NUMBER, text.to_i] }

      when (text = @ss.scan(/\"[^"]*\"/))
         action { [:STRING, text[1..-2]] } # 'hi'

      when (text = @ss.scan(/\n+/))
         action { [:NEWLINE, text] }

      when (text = @ss.scan(/enrd/))
         action { [:ENRD, text] }

      when (text = @ss.scan(/derf/))
         action { [:DERF, text] }

      when (text = @ss.scan(/crass/))
         action { [:CRASS, text] }

      when (text = @ss.scan(/irf/))
         action { [:IRF, text] }

      when (text = @ss.scan(/erse/))
         action { [:ERSE, text] }

      when (text = @ss.scan(/while/))
         action { [:WHILE, text] }

      when (text = @ss.scan(/vaiindo/))
         action { [:VAIINDO, text] }

      when (text = @ss.scan(/ate/))
         action { [:ATE, text] }

      when (text = @ss.scan(/true/))
         action { [:TRUE, text] }

      when (text = @ss.scan(/farse/))
         action { [:FARSE, text] }

      when (text = @ss.scan(/nir/))
         action { [:NIR, text] }

      when (text = @ss.scan(/iguar/))
         action { [text, text] }

      when (text = @ss.scan(/menoiguar/))
         action { [text, text] }

      when (text = @ss.scan(/maioiguar/))
         action { [text, text] }

      when (text = @ss.scan(/[a-z]\w*/))
         action { [:IDENTIFIER, text] } # variable_name, method_name

      when (text = @ss.scan(/[A-Z]\w*/))
         action { [:CONSTANT, text] } # Constant

      when (text = @ss.scan(/&&/))
         action { [text, text] }

      when (text = @ss.scan(/\|\|/))
         action { [text, text] }

      when (text = @ss.scan(/!=/))
         action { [text, text] }

      when (text = @ss.scan(/./))
         action { [text, text] }  # +, -, *, ., (, )

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

  def run(code)
    scan_setup(code)
    tokens = []
    while token = next_token
      tokens << token
    end
    tokens
  end
end # class
